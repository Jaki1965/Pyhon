# 1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()),
# который должен принимать данные (список списков) для формирования матрицы.

# Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
# Примеры матриц: 3 на 2, 3 на 3, 2 на 4.

# 31    32         3    5    32        3    5    8    3
# 37    43         2    4    6         8    3    7    1
# 51    86        -1   64   -8

# Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода __add__()
# для реализации операции сложения двух объектов класса Matrix (двух матриц).
# Результатом сложения должна быть новая матрица.

#Подсказка: сложение элементов матриц выполнять поэлементно —
# первый элемент первой строки первой матрицы складываем с первым элементом первой строки второй матрицы и т.д.


lst_1 = [[1, 4, 6, 2], [1, 1, 1, 4], [2, 5, 6, 1],[3, 2, 2, 1]]
lst_2 = [[1, 3, 3, 3], [2, 2, 5, 5], [3, 4, 5, 3],[7, 4, 2, 3]]

class Matrix:

    def __init__(self, mat_1, mat_2):
        self.mat_1 = mat_1
        self.mat_2 = mat_2

    def __add__(self):
        self.matr = [[self.mat_1[i][j] + self.mat_2[i][j] for j in range(len(self.mat_1[0]))] for i in range(len(self.mat_1))]
        self.str_matr = str('\n'.join(['\t'.join([str(j) for j in i]) for i in self.matr]))
        return str(f'Матрица 3 итоговая\n{self.str_matr}')

    def __str__(self):
        self.str_1 = str('\n'.join(['\t'.join([str(j) for j in i]) for i in self.mat_1]))
        self.str_2 = str('\n'.join(['\t'.join([str(j) for j in i]) for i in self.mat_2]))
        return (f'Матрица 1\n{self.str_1}\nМатрица 2\n{self.str_2}')


my_matrix = Matrix(lst_1, lst_2)
print(my_matrix)
print(my_matrix.__add__())

