# 6. Реализовать два небольших скрипта:
#
#  1. итератор, генерирующий целые числа, начиная с указанного;
#  2. итератор, повторяющий элементы некоторого списка, определённого заранее.
#     Подсказка: используйте функцию count() и cycle() модуля itertools.
#     Обратите внимание, что создаваемый цикл не должен быть бесконечным.
#     Предусмотрите условие его завершения.
#
# Например, в первом задании выводим целые числа, начиная с 3.
# При достижении числа 10 — завершаем цикл.
# Вторым пунктом необходимо предусмотреть условие, при котором повторение элементов списка прекратится.

# 1. итератор, генерирующий целые числа, начиная с указанного;

from itertools import count, cycle

def my_iterator(a, b):
    # аргумент a c какого числа начинаем, аргумент b каким числом заканчиваем
    for i in count(a):
        print(i)
        if i == b:
            return


my_iterator(3, 10)

# Если есть необходимость то можно сделать функцию формирующую список
def my_lst_iterator(a, b):
    my_lst = []
    for i in count(a):
        my_lst.append(i)
        if i == b:
            return my_lst


print(my_lst_iterator(3, 10))

# 2. итератор, повторяющий элементы некоторого списка, определённого заранее.

lst_task = [1, 3, 117, 22, 27, 35, 184, 11, 7, 35, 87]

# функция в качестве аргумента "a" принимает лист , в качестве аргумента "b" количество повторямых элементов
def my_copy_list(a, b):
    i = 0
    result = []
    for el in cycle(a):
        result.append(el)
        i += 1
        if i == b:
            return result

print(my_copy_list(lst_task, 2))
print(my_copy_list(lst_task, 6))
print(my_copy_list(lst_task, 8))






